1. Use below command to allow the broswer to trust the certificate provided by the dotnet SDK
   dotnet dev-certs https --trust

2. No need to get alarmed, when https://localhost:5001/ gives "This localhost page canâ€™t be found".
    Just try with https://localhost:5001/weatherforecast, it will work.

3. Every dotnet application has a program class which contains a main method. When the application runs for the first time
    the main method gets executed.

4. CreateDefaultBuilder Method:
    This method initializes a new instance of the HostBuilder class with pre-configured defaults and returns it.
    The following defaults are applied to the the returned IHostBuilder:
        
        1. Set the IHostEnvironment.ContentRootPath to the result of System.IO.Directory.GetCurrentDirectory().
        2. Load host Iconfiguration from 'DOTNET_' prefixed environment variables.
        3. Load host Iconfiguration from supplied command line arguments.
        4. Load app Iconfiguration from 'appsettings.json' and 'appsettings.[IHostEnvironment.EnvironmentName].json'. 
        5. Load app Iconfiguration from User Secrets when IHostEnvironment.EnvironmentName is Development using entry assembly.
        6. Load app Iconfiguration from environment variables.
        7. Load app Iconfiguration from supplied command line arguments.
        8. Configure the ILoggerFactory to log to the console, debug and event source output.
        9. Enabled scope validation on the dependecy injection container when when IHostEnvironment.EnvironmentName is Development.

    It also tells us to use StartUp class.

6. In Startup class constructor, Configuration is being injected. appsettings.Development.json is one of the Configuration files.
    We should change the log level of the Microsoft to Information in that file. 
    
7. Coming back to start up class, it contains two methods i.e. ConfigureServices and Configure. 
    ConfigureServices method commonly known as dependecy injection container.

    If we want to make a class or services made available to other areas of the application, we can add them inside this method
    and dotnet core will take care of the creation and deletion of these services.

8. Configure method is used to configure the HTTP request pipeline. As we made our get request from broswer to api controller, 
    our request goes through a series of middleware on the way in and on the way out.

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseSwagger();
        app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "DatingApp_API v1"));
    }

    First it checks whether it's in development mode, if it and it faces an exception, it uses development exception page.
    It also use swagger for API documentation.

    app.UseHttpsRedirection();

    If a request comes as http, application redirects the request to a https endpoint.

    app.UseRouting();

    This tells us to use routing.

    app.UseAuthorization();

    This tells us to use Authorization. which at the moment not properly configured.

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });

    Adds endpoints to the controller actions.


9. EntityFrameowork
----------------
    It is ORM tool. ORM stands for Object Relational Mapper. 
    EntityFrameowork translates our code into SQL commands that operate on our tables.

    Features
    --------
    1. Querying
    2. Change Tracking
    3. Saving
    4. Concurrency
    5. Transactions
    6. Caching
    7. Built In Conventions
    8. Configuration
    9. Migrations

10. Installed Microsoft.EntityFrameworkCore.SqlServer, since I don't need all features of 
    EntityFramework Core, that's why installed only the SQL Server portion of it.

    Note: Here, I have checked "Include Prerelease" in order to get the pre-release version of .NET 5.
    Don't install pre-release version of third party nuget packages just to be safe.

11. Adding EntityFrameowork tool using dotnet cli. First I had to uninstall old version using below command
    dotnet tool uninstall dotnet-ef -g

12. Now installed the latest version by going to https://www.nuget.org/ and searched "dotnet ef" and got the latest command.
    dotnet tool install --global dotnet-ef --version 5.0.0-rc.1.20451.13

    Now when you try to add your first migration, you will a get an error like this.

        Your startup project 'DatingApp-API' doesn't reference Microsoft.EntityFrameworkCore.Design. 
        This package is required for the Entity Framework Core Tools to work. 
        Ensure your startup project is correct, install the package, and try again.
 
    So, you first need install Microsoft.EntityFrameworkCore.Design nuget package 
    and build your project and then try the above command.

13. now we need to update the database using below command.
    dotnet ef database update.

14. sample sql query to add to Users table

    INSERT INTO Users
    VALUES('Pravakar')

    INSERT INTO Users
    VALUES('Bijaya')

    INSERT INTO Users
    VALUES('Jagannath')

14. once you test your api in postman, you will notice, by fault, .net core returns data
    in application/json format and properties in camelcase notation.

15. Using Asynchronous code to make the application more scallable.

16.Angular: when you run the application with ng-serve, angular bundler called webback builds and bundles
   couple of javascripts file to index.html.

17.Components: Decorator that marks a class as an Angular component and provides configuration metadata that determines how the component 
   should be processed, instantiated, and used at runtime.

    Components are the most basic UI building block of an Angular app. An Angular app contains a tree of Angular components.

    Angular components are a subset of directives, always associated with a template. Unlike other directives, 
    only one component can be instantiated for a given element in a template.

    A component must belong to an NgModule in order for it to be available to another component or application. 
    To make it a member of an NgModule, list it in the declarations field of the NgModule metadata.

18.Module
    A Angular application must have at least one module.
    
    NgModule
    --------
    A decoration which makes a class as a ngModule and provides some metadata.
    it has normally 4 metadatas.
    1. declarations: 
        It's an array which contains set of components, directives, pipes(declarable) that belong to that module.
        A declarable:
            is either a component, directive or pipe
            can be added to a module's declarations array
            belongs to one, and only one, module

    2. imports:
        The set of NgModules whose exported declarables are available to templates in this module.

    3. providers: 
        The set of injectable objects that are available in the injector of this module.
        Dependencies whose providers are listed here become available for injection into 
        any component, directive, pipe or service that is a child of this injector. 
        
    4. bootstrap:
        The set of components that are bootstrapped when this module is bootstrapped. 
        The components listed here are automatically added to entryComponents.

19. OnInit
    A lifecycle hook that is called after Angular has initialized all data-bound properties of a directive. 
    Define an ngOnInit() method to handle any additional initialization tasks.

20. CORS
    Cross-Origin Resource Sharing (CORS) is a mechanism that uses additional HTTP headers to tell browsers to give 
    a web application running at one origin, access to selected resources from a different origin. 
    A web application executes a cross-origin HTTP request when it requests 
    a resource that has a different origin (domain, protocol, or port) from its own.

    In order to allow CORS, you have to make some code changes on Startup class.

    1. Add the following line inside ConfigureServices method
        services.AddCors(); // it doesn't matter in which line you add this.
    
    2. Add the following line inside Configure method
        app.UseCors(policy => policy.WithOrigins("http://localhost:4200").AllowAnyHeader().AllowAnyMethod());
        you have to write it in between app.UseRouting() and app.UseEndpoints() line.

21. bootstrap
    While using bootstrap in angular make sure to use, ngx-bootstrap rather than normal bootstrap
    because bootstrap uses jquery under the hood, which is a similar DOM manipulating framework
    like Angular. So if you use jquery inside Angular, it might cause problems in future.

    After adding ngx-bootstrap, make sure to re-start the angular application.        
 
 22. Storing Passwords:
    One of the safe option of storing password is hashing the password, which means that we take their password, we add or apply
    a hashing algorithm to it, and we end up with a password hash and we store the password hash in the database.

    Now, hashing is one way only. You cannot calculate from a hash what it was before it was hashed.
    So in theory, this is a pretty secure way of storing our passwords. if two users has same weak password,
    But the problem with this particular method is that Bob and Tom have continued to use their weak password "letmein".
    
    But when we calculate the password hash, then the same algorithm is applied to the same password,
    which means we get the same result. Now, if our database gets compromised, then the attacker knows 
    that Bob and Tom have got exactly the same password. And if he can somehow calculate the password from this, 
    then he's got access to two accounts.

    Also, there are a lot websites are available which give you pre-decoded version of weak password, which is not a great thing.

    So obhiously hashing is not good enough. So it's better to user password hash and salt.

23. While sending httpost request, the content of the request body should have an object equivalent in the API endpoint.
    Creating parameters won't work.

    for example if the request body is like below
    {
        "username": "Pravakar",
        "password": "Pravakar@1955"
    }
    then creating method like this won't work
    public async Task<ActionResult<AppUser>> Register(string username, string password)

    instead of individual string parameters, we should provide 
    a object parameter which contains properties like username and password.

24. DTO: Data Transfer Objects are very useful since it's bad practice to send an entity from as a response
    becuase it might contain sensitive data or we might need all the properties of the entity and there is a chance of
    circular reference exception if we use entities.

25. ApiController attribute automatically validates 
    if the paramters are valid or not and also bind request body to endpoint parameters.

26. To delete a database use 'dotnet ef database drop' and to create and update the database upto the latest Migrations
    use 'dotnet ef database update'.

27. JWT:
    JSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and 
    self-contained way for securely transmitting information between parties as a JSON object. 

    Authorization: This is the most common scenario for using JWT. Once the user is logged in, 
    each subsequent request will include the JWT, allowing the user to access routes, services, 
    and resources that are permitted with that token. Single Sign On is a feature that widely uses JWT nowadays, 
    because of its small overhead and its ability to be easily used across different domains.

    Single sign-on (SSO) is an authentication method that enables users to securely authenticate with multiple applications 
    and websites by using just one set of credentials.

    In its compact form, JSON Web Tokens consist of three parts separated by dots (.), which are:

    Header
    Payload
    Signature


    Header
    ------
    The header typically consists of two parts: the type of the token, which is JWT, 
    and the signing algorithm being used, such as HMAC SHA256 or RSA.

    example: 
    {
        "alg": "HS256",
        "typ": "JWT"
    }

    Payload:
    -------
    The second part of the token is the payload, which contains the claims. Claims are statements about an entity 
    (typically, the user) and additional data. There are three types of claims: registered, public, and private claims.

    Signature
    ---------
    To create the signature part you have to take the encoded header, the encoded payload, a secret, 
    the algorithm specified in the header, and sign that.

    The signature is used to verify the message wasn't changed along the way, and, in the case of tokens signed with a private key, 
    it can also verify that the sender of the JWT is who it says it is.



    client                                                                  Server
  ----------                  sends username and password                 ----------
                ----------------------------------------------------->
                    validates credentials and returns a token
                <----------------------------------------------------
                        Sends JWT with further request
                ----------------------------------------------------->
                Server verifies the token and sends back the response
                <----------------------------------------------------

    Benefits
    --------
    1. No session to manage
    2. Portable: single token can be used with multiple backends
    3. No Cookie: Mobile friendly
    4. Performance: Once token is issued, no need for database call to verify user

28. AddScoped:
    AddScoped is scoped to the life time of the http request. When the service is injected to the controller, 
    a new instance of the service is created and when the the request is finished, the service gets disposed.
    
29. One of the main reason for creating Interface is unit testing. since an Interface only contains, it's easy to mock it.

30. To use JWT token, System.IdentityModel.Tokens.Jwt package needs to be installed.

31. SymmetricSecurityKey is a type of encription, where a single key is used for both encrypt and decrypt electronic information.

32. In order to authenticate using JWT token, Microsoft.AspNetCore.Authentication.JwtBearer package needs to be installed.

33. Extension methods enable you to "add" methods to existing types without creating a new derived type.
    1. class and the static method must be static.

34. To get inside multiple folder, use cd src/app

