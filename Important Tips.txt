1. Use below command to allow the broswer to trust the certificate provided by the dotnet SDK
   dotnet dev-certs https --trust

2. No need to get alarmed, when https://localhost:5001/ gives "This localhost page canâ€™t be found".
    Just try with https://localhost:5001/weatherforecast, it will work.

3. Every dotnet application has a program class which contains a main method. When the application runs for the first time
    the main method gets executed.

4. CreateDefaultBuilder Method:
    This method initializes a new instance of the HostBuilder class with pre-configured defaults and returns it.
    The following defaults are applied to the the returned IHostBuilder:
        
        1. Set the IHostEnvironment.ContentRootPath to the result of System.IO.Directory.GetCurrentDirectory().
        2. Load host Iconfiguration from 'DOTNET_' prefixed environment variables.
        3. Load host Iconfiguration from supplied command line arguments.
        4. Load app Iconfiguration from 'appsettings.json' and 'appsettings.[IHostEnvironment.EnvironmentName].json'. 
        5. Load app Iconfiguration from User Secrets when IHostEnvironment.EnvironmentName is Development using entry assembly.
        6. Load app Iconfiguration from environment variables.
        7. Load app Iconfiguration from supplied command line arguments.
        8. Configure the ILoggerFactory to log to the console, debug and event source output.
        9. Enabled scope validation on the dependecy injection container when when IHostEnvironment.EnvironmentName is Development.

    It also tells us to use StartUp class.

6. In Startup class constructor, Configuration is being injected. appsettings.Development.json is one of the Configuration files.
    We should change the log level of the Microsoft to Information in that file. 
    
7. Coming back to start up class, it contains two methods i.e. ConfigureServices and Configure. 
    ConfigureServices method commonly known as dependecy injection container.

    If we want to make a class or services made available to other areas of the application, we can add them inside this method
    and dotnet core will take care of the creation and deletion of these services.

8. Configure method is used to configure the HTTP request pipeline. As we made our get request from broswer to api controller, 
    our request goes through a series of middleware on the way in and on the way out.

    if (env.IsDevelopment())
    {
        app.UseDeveloperExceptionPage();
        app.UseSwagger();
        app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "DatingApp_API v1"));
    }

    First it checks whether it's in development mode, if it and it faces an exception, it uses development exception page.
    It also use swagger for API documentation.

    app.UseHttpsRedirection();

    If a request comes as http, application redirects the request to a https endpoint.

    app.UseRouting();

    This tells us to use routing.

    app.UseAuthorization();

    This tells us to use Authorization. which at the moment not properly configured.

    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });

    Adds endpoints to the controller actions.


9. EntityFrameowork
----------------
    It is ORM tool. ORM stands for Object Relational Mapper. 
    EntityFrameowork translates our code into SQL commands that operate on our tables.

    Features
    --------
    1. Querying
    2. Change Tracking
    3. Saving
    4. Concurrency
    5. Transactions
    6. Caching
    7. Built In Conventions
    8. Configuration
    9. Migrations

10. Installed Microsoft.EntityFrameworkCore.SqlServer, since I don't need all features of 
    EntityFramework Core, that's why installed only the SQL Server portion of it.

    Note: Here, I have checked "Include Prerelease" in order to get the pre-release version of .NET 5.
    Don't install pre-release version of third party nuget packages just to be safe.

11. Adding EntityFrameowork tool using dotnet cli. First I had to uninstall old version using below command
    dotnet tool uninstall dotnet-ef -g

12. Now installed the latest version by going to https://www.nuget.org/ and searched "dotnet ef" and got the latest command.
    dotnet tool install --global dotnet-ef --version 5.0.0-rc.1.20451.13

    Now when you try to add your first migration, you will a get an error like this.

        Your startup project 'DatingApp-API' doesn't reference Microsoft.EntityFrameworkCore.Design. 
        This package is required for the Entity Framework Core Tools to work. 
        Ensure your startup project is correct, install the package, and try again.
 
    So, you first need install Microsoft.EntityFrameworkCore.Design nuget package 
    and build your project and then try the above command.

13. now we need to update the database using below command.
    dotnet ef database update.

14. sample sql query to add to Users table

    INSERT INTO Users
    VALUES('Pravakar')

    INSERT INTO Users
    VALUES('Bijaya')

    INSERT INTO Users
    VALUES('Jagannath')

14. once you test your api in postman, you will notice, by fault, .net core returns data
    in application/json format and properties in camelcase notation.

15. Using Asynchronous code to make the application more scallable.



 







